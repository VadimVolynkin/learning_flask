# OFFICIAL DOCS
https://palletsprojects.com/p/flask/


pipenv install Flask



# ============================================================================================================================
# ШАБЛОНИЗАЦИЯ
# ============================================================================================================================
по умолчанию все шаблоны берутся из подкаталога templates программы или пакета


render_template




===============================================

# ============================================================================================================================
# КАК РАБОТАЕТ ФЛАСК
# ============================================================================================================================
Сервер получает запрос от клиента - сначала может быть создан контекст приложения
Затем обязательно создается контекст запроса - фактическое представление (обработчик) текущего запроса


# ===== КОНТЕКСТ ПРИЛОЖЕНИЯ(создается если используется)

g 
# общая временная пользовательская информация для обработки запроса(соединение БД). После обработки запроса данные g удаляются.

current_app
# ссылка на контекст текущего приложения


# ===== КОНТЕКСТ ЗАПРОСА(создается всегда после контекста приложения)

request
# данные, связанные с пришедшим запросом, включая текущий URL
# часто – это данные GET-запроса в формате: ключ-значение
# request доступна во всех функциях текущего потока (текущего представления) и шаблонах

session
# словарь, в котором можно сохранять данные в пределах сессии
# сессия сохраняется между запросами и уникальна для каждого источника запроса
# у сессии есть время жизни, после чего она очищается. Время отсчитывается от последнего прихода запроса.








# ============================================================================================================================
# URL
# ============================================================================================================================

# ===== генерирует URL-адрес по имени функции-обработчика
url_for(endpoint, **values) 

# создание контекста запроса без активации веб-сервера
# позволет узнать сгенерированные url
with app.test_request_context():
    print(url_for('index'))
    print(url_for('profile', username="selfedu"))


# ===== создание url адреса с использованем переменных 
@app.route("/profile/<username>")
def profile(username):
    return f"Пользователь: {username}"

# можно указать использованием только целых чисел, иначе 404
# int – должны присутствовать только цифры;
# float – можно записывать число с плавающей точкой;
# path – можно использовать любые допустимые символы URL плюс символ слеша ‘/’. 
@app.route("/profile/<int:username>")


# ===== создание url для статических файлов в html шаблоне
# 'static'  вместо функции-обработчика говорит что нужно найти файл в папке static
<link type="text/css" href="{{ url_for('static', filename='css/styles.css')}}" rel="stylesheet" />




# ============================================================================================================================
# FORMS
# ============================================================================================================================

# ===== код формы
<form action="/contact" method="post" class="form-contact">
  <p><label>Имя: </label> <input type="text" name="username" value="" requied />
  <p><label>Email: </label> <input type="text" name="email" value="" requied />
  <p><label>Сообщение:</label>
  <p><textarea name="message" rows=7 cols=40></textarea>
  <p><input type="submit" value="Отправить" />
</form>

# action - URL, который принимает данные от формы

# method - способ передачи данных
GET – в виде строки запроса: "/handler?name=Alex&old=18&profit=1000"
POST – в виде бинарных данных (для передачи больших объемов данных: изображений, звуков, документов и т.п., а также закрытых сведений: паролей, логинов и т.п.)

# ===== код обработчика с указанием методов
@app.route("/contact", methods=["POST", "GET"])


# ===== дотуп к данным
print(request.form['username'])



# ============================================================================================================================
# Мгновенные сообщения - flash, get_flashed_messages
# ============================================================================================================================
# функции flash и get_flashed_messages используют механизм сессий(требуют настройки сессий)

flask.flash(message, category='message') 
# формирование сообщения пользователю
# message – текст сообщения
# category – категория сообщения

flask.get_flashed_messages(with_categories=False, category_filter=[])
# обработка сформированных сообщений в шаблоне документа
# with_categories – разрешает использование категорий при извлечении сообщений
# category_filter – список разрешенных категорий при выборке сообщений



# ============================================================================================================================
# SESSION
# ============================================================================================================================

# активация работы сессий
app.config['SECRET_KEY'] = 'fdgdfgdfggf786hfg6hfg6h7f'



# ============================================================================================================================
# Декоратор errorhandler, функции redirect и abort
# ============================================================================================================================

# декоратор указывает какой код ошибки он обрабатывает
# в этом случае сервер обработает 404 и вернет 200
@app.errorhandler(404)
def pageNotFount(error):
    return render_template('page404.html', title="Страница не найдена", menu=menu)
    # если надо вернуть 404
    # return render_template('page404.html', title="Страница не найдена", menu=menu), 404





